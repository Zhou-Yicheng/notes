* The Structure of the Java Virtual Machine

** The ~class~ File Format
   Compiled code to be executed by the JVM is represented using a hardware-
and operating system-independent binary format, typically stored in a file,
known as the ~class~ file format. The ~class~ file format precisely defines
the representation of a class or interface, including details such as byte
ordering that might be taken for granted in a platform-specific object file
format.
  
** Data Types
   Like the Java programming language, the JVM operates on two kinds of types:
/primitive types/ and /reference types/. There are, correspondingly, two kinds
of values that can be stored in variables, passed as arguments, returned by
methods, and operated upon: /primitive values/ and /reference values/.

The JVM expects that nearly all type checking is done prior to run time,
typically by a compiler, and does not have to be done by the JVM itself.
Values of primitive types need not be tagged or otherwise be inspectable
to determine their types at run time, or to be distinguished from values
of reference types. Instead, the instruction set of the JVM distinguishes
its operand types using instructions intended to operate on values of
specific types. Foe instance, /iadd/, /ladd/, /fadd/, and /dadd/ are all
JVM instructions that add two numeric values and produce numeric results,
but each is specialized for its operand type: ~int~, ~long~, ~float~, and
~double~, respectively. For a summary of type support in the JVM instruction
set, see $2.11.

The JVM contains explicit support for objects. An object is either a
dynamically allocated class instance or an array. A reference to an object
is considered to have JVM type ~reference~. Values of type ~reference~ can
be though of as pointers to objects. More than one reference to an object
may exist. Objects are always operated on, passed, and tested via values
of type ~reference~.
   
** Primitive Types and Values
   The primitive date types supported by the JVM are the /numeric types/, the
~boolean~ type, and the ~returnAddress~ type.

The numeric types consist of /integral types/ and the /floating-point types/.

- ~byte~, whose values are 8-bit signed two's-complement integers, and whose
  default value is zero
- ~short~, whose values are 16-bit signed two's-complement integers, and
  whose default value is zero
- ~int~, whose values are 32-bit signed two's-complement integers, and whose
  default value is zero
- ~long~, whose values are 64-bit signed two's-complement integers, and whose
  default value is zero
- ~char~, whose values are 16-bit *unsigned* integers representing Unicode
  code points in the Basic Multilingual Plane, encoded with UTF-16, and whose
  default value is the null code point('\u0000')
- 
- ~float~, whose values are elements of the float value set or, where supported
  the float-extended-exponent value set, and whose default value is positive zero
- ~double~, whose values are elements of the double value set or, where supported
  the double-extended-exponent value set, and whose default value is positive zero

The values of the ~boolean~ type encode the truth values ~true~ and ~false~,
and the default value is ~false~.

The values of the ~returnAddress~ type are pointers to the opcodes of JVM
instructions. Of the primitive types, only the ~returnAddress~ type is not
directly associated with a Java programming language type.

*** Integral Types and Values
- For ~byte~, from -128 to 127 (-2^7 to 2^7 - 1), inclusive
- For ~short~, from -32768 to 32767 (-2^15 to 2^15 - 1), inclusive
- For ~int~, from -2147483648 to 2147483647 (-2^31 to 2^31 - 1), inclusive
- For ~long~, from -9223372036854775808 to 9223372036854775807 (-2^63 to
  2^63 - 1), inclusive
- For ~char~, from 0 to 65535 inclusive
    
*** TODO Floating-Point Types, Value Sets, and Values
    
*** The ~returnAddress~ Type and Values
    The ~returnAddress~ type is used by the JVM's /jsr/, /ret/ and /jsr_w/
instructions. The values of the ~returnAddress~ type are pointers to the
opcodes of JVM instructions. Unlike the numeric primitive types, the
~returnAddress~ type does not correspond to any Java programming language
type and cannot be modified by the running program.

*** The ~boolean~ Type
    Although the JVM defines a ~boolean~ type, it only provides very limited
support for it. There are no JVM instructions solely dedicated to operations
on ~boolean~ values. Instead, expressions in the Java programming language
that operate on ~boolean~ values are compiled to use values of the JVM ~int~
data type.

The JVM does directly support ~boolean~ arrays. Ite /newarray/ instruction
enables creation of ~boolean~ arrays. Arrays of type ~boolean~ are accessed
and modified using the ~byte~ array instructions /baload/ and /bastore/.

The JVM ~boolean~ array components using ~1~ to represent ~true~ and ~0~ to
represent ~false~. Where Java programming language ~boolean~ values are
mapped by compilers to values of JVM type ~int~, the compilers must use the
same encoding.

** Reference Types and Values
   There are three kinds of ~reference~ types: class types, array types, and
interface types. Their values are references to dynamically created class
instances, arrays, or class instances or arrays that implement interfaces,
respectively.

An array type consists of a /component type/ with a single dimension (whose
length is not given by the type). The component type of an array type may
itself be an array type. If, stating from any array type, one considers its
component type, and then (if that is also an array type) the component type
of that type, and so on, eventually one must reach a component type that is
not an array type; this is called the /element type/ of the array type. The
element type of an array type is necessarily either a primitive type, or a
class type, or an interface type.

A ~reference~ value may also be the special null reference, a reference to no
objects, which will be denoted here by ~null~. The ~null~ reference initially
has no run-time type, but may be case to any type. The default of a ~reference~
type is ~null~.

This specification does not mandate a concrete value encoding ~null~.

** Run-Time Data Areas
The Java Virtual Machine defines various run-time data areas that are
used during execution of a program. Some of these data areas are
created on JVM start-up and are destroyed only when the JVM exist.
Other data areas are per thread. Per-thread data areas are created
when a thread is created and destroyed when the thread exits.

*** The ~pc~ Register
    The JVM can support many threads of execution. Each JVM thread
has its own program counter register. If the current method is not
~native~, the ~pc~ register contains the address of the JVM instruction
currently being executed. If the method currently being executed by
the thread is ~native~, the value of the JVM's ~pc~ register is *undefined*.
The JVM's ~pc~ register is wide enough to hold a ~returnAddress~ or a
native pointer on the specific platform.

*** JVM Stacks
    Each JVM thread has a private /Java Virtual Machine stack/, created
at the same time as the thread. A JVM stack stores *frames*. A JVM stack
is analogous to the stack of a conventional language such as C: it holds
local variables and partial results, and plays a part in method invocation
and return. Because the JVM stack is never manipulated directly except to
push and pop frames, frames may be heap allocated. The memory for a JVM
stack dose not need to be contiguous.

This specification permits JVM stacks either to be of a *fixed* sized or to
*dynamically* expand and contract as required by the computation. If the JVM
stacks are of a fixed size, the size of each JVM stack may be chosen
independently when that stack is created.

+ If the computation in a thread requires a larger JVM stack than is permitted,
  the JVM throws a StackOverflowError.
+ If JVM stacks can be dynamically expanded, and expansion is attempted but
  insufficient memory can be made available to effect the expansion, or if
  insufficient memory can be made available to create the initial JVM stack
  for a new thread, the JVM throws an OutOfMemoryError

*** Heap
    The JVM has a /heap/ that is shared among all JVM threads. The heap is the run-
time data area from which memory for all class instances and arrays is allocated.

The heap is created on virtual machine start-up. Heap storage for objects is
reclaimed by an automatic storage management system (know as /garbage collector/);
objects are never explicitly deallocated. The JVM assumes no particular type of
automatic storage management system, and the storage management technique may be
chosen according to the implementor's system requirements. The heap may be of a
fixed size or may be expanded as required by the computation and may be contracted
if a larger heap becomes unnecessary. The memory for the heap does not need to be
contiguous.

+ If a computation requires more heap than can be made available by the automatic
storage management system, the JVM throws an OutOfMemoryError.

*** Method Area
    The JVM has a /method area/ that is shared among all JVM threads. The method
area is analogous to the storage area for *compiled code* of a conventional
language or analogous to the "text" segment in an operating system process.
It stores *per-class* structures such as the run-time constant pool, field and
method data, and the code for methods and constructors, including the special
methods? used in class and instance initialization and interface initialization.

The method area is created on virtual machine start-up. Although the method area
is logically part of the heap, simple implementations may choose not to either
garbage collect or compact it. This specification does not to mandate the location
of the method area or the policies used to manage compiled code. The method area
may be of a fixed size or may be expanded as required by the computation and may
be contracted if a larger method area becomes unnecessary. The memory for the
method area does not need to be contiguous.

+ If memory in the method area cannot be made available to satisfy an allocation
  request, the JVM throws an OutOfMemoryError.
  
*** Run-Time Constant Pool
    A /run-time constant pool/ is a *per-class* or per-interface run-time
representation of the ~constant_pool~ table in a ~class~ file. It contains
several kinds of constants, ranging from numeric literals known at compile-
time to method and field references that must be resolved at run-time. The
run-time constant pool serves a function similar to that of a symbol table
for a conventional programming language, although it contains a wider range
of data than a typical symbol table.

Each run-time constant pool is allocated from the JVM's *method area*. The
run-time for a class or interface is constructed when the class or interface
is created by the JVM.

+ When creating a class or interface, if the construction of the run-time
constant pool requires more memory than can be made available in the method
area of the JVM, the JVM throws an OutOfMemoryError.

*** Native Method Stacks
    An implementation of JVM may use conventional stacks, colloquially called
"C stacks", to support ~native~ methods (methods written in a language other
than Java). Native method stacks may also be used by the implementation of
an interpreter for the JVM's instruction set in a language such as C. JVM
implementations that cannot load ~native~ methods and that do not themselves
rely on conventional stacks need not supply native method stacks. If supplied,
native method stacks are typically allocated *per thread* when each thread is
created.

This specification permits native method stacks either to be of a fixed size
or to dynamically expand and contract as required by the computation. If the
native method stacks are of a fixed size, the size of each native method stack
may be chosen independently when that stack is created.

+ If the computation in a  thread requires a larger native method stack than
  is permitted, the JVM throws a StackOverflowError.
+ If native method stacks can be dynamically expanded and native method stack
  expansion is attempted but insufficient memory can be made available, or if
  insufficient memory can be made available to create the initial native method
  stack for a new thread, the JVM throws an OutOfMemoryError.

** Frames
   A /frame/ is used to store data and partial results, as well as to perform
dynamic linking, return values for methods, and dispatch exceptions.

A new frame is created each time a *method* is invoked. A frame is destroyed
when its method invocation completes, whether that completion is normal or
abrupt (it throws an uncaught exception). Frames are allocated from the *JVM
stack* of the thread creating the frame. Each frame has its own array of local
variables, its own operand stack, and a reference to the run-time constant pool
of the class of the current method.

The sizes of the local variable array and the operand stack are determined at
compile-time and are supplied along with the code for the method associated
with the frame. Thus the size of the frame data structure depends only on the
implementation of the JVM, and the memory for these structures can be allocated
simultaneously on method invocation.

Only one frame, the frame for the executing method, is active at any point in
a given thread of control. This frame is referred to as the /current frame/,
and its method is known as the /current method/. The class in which the current
method is defined is the /current class/. Operations on local variables and the
operand stack are typically with reference to the current frame.

A frame ceases to be current if its method invokes another method or if its
method completes. When a method is invoked, a new frame is created and becomes
current when control transfers to the new method. On method return, the
current frame passes back the result of its method invocation, if any, to the
previous frame. The current frame is then discarded as the previous frame
becomes the current one.

Note that a frame created by a thread is local to that thread and cannot be
referenced by any other thread.
   
*** Local Variables
    Each frame contains an array of variables known as its /local variables/.
The length of the local variable array of a frame is determined at compile-
time and supplied in the binary representation of a class or interface along
with the code for the method associated with the frame.

A single local variables can hold a value of type ~boolean~, ~byte~, ~char~,
~short~, ~int~, ~float~, ~reference~, or ~returnAddress~. A pair of local
variables can hold a value of type ~long~ or ~double~.

Local variables are addressed by indexing. The index of the first local variable
is zero. An integer is considered to be an index into the local variable array
if and only if that integer is between zero and one less than the size of the 
local variable array.

A value of type ~long~ or type ~double~ occupies two consecutive local variables.
Such a value may only be addressed using the lesser index. For example, a value
of type ~double~ stored in the local variable array at index /n/ actually
occupies the local variables with indices /n/ and /n+1/; however, the local
variable at index /n+1/ cannot be loaded from. It can be stored into. However,
doing so invalidates the contents of local variable /n/.

The JVM does not require /n/ to be even. In intuitive terms, values of types
~long~ and ~double~ need not be 64-bit aligned in the local variables array.
Implementors are free to decide the appropriate way to represent such values
using the two local variables reserved for the value.

The JVM uses local variables to pass parameters on method invocation. On class
method invocation, any parameters are passed in consecutive local variables
starting from local variable /0/. On instance method invocation, local
variable /0/ is always used to pass a reference to the object on which the
instance method is being invoked (~this~ in the Java programming language).
Any parameters are subsequently passed in consecutive local variables starting
from local variable /1/.
    
*** Operand Stacks
    Each frame contains a last-in-first-out (LIFO) stack known as its
/operand stack/. The maximum depth of the operand stack of a frame is
determined at compile-time and is supplied along with the code for the
method associated with the frame.

Where it is clear by context, we will sometimes refer to the operand
stack of the current frame as simply the operand stack.

The operand stack is empty when the frame that contains it is created.
The JVM supplies instructions to load constants or values from local
variables or fields onto the operand stack. Other JVM instructions take
operands from the operand stack, operate on them, and push the result
bakc onth the operand stack. The operand stack is also used to prepare
parameters to be passed to methods and to receive method results.

For example, the /iadd/ instruction adds two ~int~ values together. It
requires that the ~int~ values to be added be the top two values of the
operand stack, pushed there by previous instructions. Both of the ~int~
values are popped from the operand stack. They are added, and their sum
is pushed back the operand stack. Subcomputations may be nested on the
operand stack, resulting in values that can be used by the encompassing
computation.

Each entry on the operand stack can hold a value of any JVM type, including
type ~long~ or type ~double~.

Values from the operand stack must be operated upon in ways appropriate to
their types. It is not possible, for example, to push two ~int~ values and
subsequently treat them as a ~long~ or to push two ~float~ values and
subsequently add them with an /iadd/ instruction. A small number of JVM
instructions (the /dup/ instructions and /swap/) operate on run-time data
areas as raw values without regard to their specific types; these instructions
are defined in such a way that they cannot be used to modify or break up 
individual values. These restrictions on operand stack manipulation are
enforced through ~class~ file verification.

At any point in time, an operand stack has an associated depth, where a
value of type ~long~ or ~double~ contributes two units to the depth and
a value of any other type contributes one unit.

*** Dynamic Linking
    Each frame contains a reference to the run-time constant pool for the
type of the current method to support /dynamic linking/ of the method code.
The ~class~ file code for a method refers to the methods to be invoked and
variables to be accessed via *symbolic references*. Dynamic linking translates
these symbolic method references into concrete method references, loading
classes as necessary to resolve as-yet-undefined symbols, and translate
variable accesses into appropriate offsets in storage structures associated
with the run-time location of these variables.

The late binding of the methods and variables makes changes in other classes
that a method uses less likely to break this code.

*** Normal Method Invocation Completion
    A method invocation /completes normally/ if that invocation does not
cause an exception to be thrown, either directly from the JVM or as a
result of executing an explicit ~throw~ statement. If the invocation of
the current method completes normally, then a value may be returned to the
invoking method. This occurs when the invoked method executes one of the
return instructions, the choiceof which must be appropriate for the type of 
the value being returned (if any).

The current frame is used in this case to restore the state of the invoker,
including its local variables and operand stack, with the program counter
of the invoker appropriately incremented to skip past the method invocation
instruction. Execution then continues normally in the invoking method's frame
with the returned value (if any) pushed onto the operand stack of that frame.

*** Abrupt Method Invocation Completion
    A method invocation /completes abruptly/ if execution of a JVM instruction
within the method causes the JVM to throw an exception, and that exception
is not handled within the method. Exception of an /athrow/ instruction also
causes an exception to be explicitly thrown and, if the exception is not
caught by the current method, results in abrupt method invocation completion.
A method invocation that completes abruptly never returns a value to its invoker.


** Representation of Objects
   In some of implementation of the JVM, a reference to a class instance is a
pointer to a handle that is itself a pair of pointers: one to a table containing
the methods of the object and a pointer to the ~Class~ object that represents
the type of the object, and the other to the memory allocated from the heap for
the object data.
   
** TODO Floating-Point Arithmetic

** Special Methods
   
** Exceptions

** Instruction Set Summary
   A JVM instruction consists of a one-byte /opcode/ specifying the operation
to be performed, followed by zero or more /operands/ supplying arguments or 
data that are used by the operation. Many instructions have no operands and
consist only of an opcode.
#+BEGIN_SRC
do {
    atomically calculate pc and fetch opcode at pc;
    if (operands) fetch operands;
    execute the action for the opcode;
} while (there is more to do);
#+END_SRC

TODO

** Class Libraries
   The JVM must provide sufficient support for the implementation of the class
libraries of the Java SE platform. Some of the classes in these libraries cannot
be implemented without the cooperation of the JVM.

- Reflection, such as the classes in the package ~java.lang.reflect~ and the
  class ~Class~.
- Loading and creation of a class or interface. The most obvious example is
  the class ~ClassLoader~.
- Linking and initialization of a class or interface. The example classes
  cited above fall into this category as well.
- Security, such as the classes in the package ~java.security~ and other classes
  such as ~SecurityManager~.
- Multi-threading, such as the class ~Thread~.
- Weak references, such as the classes in the package ~java.lang.ref~.
- ...

** Public Design, Private Implementation
  the public view of the JVM: the ~class~ file format and the instruction set.
A JVM implementation must be able to read class ~class~ files and must exactly
implement the semantics of the JVM code therein. One way of doing this is to
take this document as a specification and to implement that specification
literally. But it is also perfectly feasible and desirable for the implementor
to modify or optimize the implementation within the constraints of this
specification. What is "under the hood" is the implementor's business, as long
as the correct external interface is carefully maintained.

- Translating JVM code at load-time or during execution into the instruction
  set of another virtual machine.
- Translating JVM code at load-time or during execution into the native
  instruction set of the host CPU (sometimes referred to as /just-in-time/,
  or /JIT/, code generation).

** Loading, Linking, and Initializing
   
